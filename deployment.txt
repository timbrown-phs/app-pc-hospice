# One Time Setup in Google Cloud
* In Console, Enable Billing for Org
* In Console, Create Project app-pc-hospice In Project Selector
* In Console, enable Compute Engine and Artifact Registry.

# Project Info
Name: app-app-pc-hospice
ID:  app-pc-hospice
Number: 690870055880

# Open Cloud Shell and Set Project
export PROJECT_ID=app-pc-hospice
echo $PROJECT_ID
gcloud config set project $PROJECT_ID

# Create a repository in Google Cloud's Artifact Registry
gcloud artifacts repositories create app-pc-hospice-repo \
   --repository-format=docker \
   --location=us-east1 \
   --description="Docker repository"
   
# Set IAM (Identity and Access Management) policy bindings on a repository in Google Cloud Artifact Registry
gcloud artifacts repositories add-iam-policy-binding app-pc-hospice-repo \
    --location=us-east1 \
    --member=serviceAccount:690870055880-compute@developer.gserviceaccount.com \
    --role="roles/artifactregistry.reader"

# Clone Source Code from Git - One Time
git clone https://github.com/timbrown-phs/app-pc-hospice
cd app-pc-hospice

# Refresh artifacery repo - After Code Changes
cd app-pc-hospice
git fetch
git pull origin main

# Build a Docker image for app
docker build -t us-east1-docker.pkg.dev/${PROJECT_ID}/app-pc-hospice-repo/app-pc-hospice:v1 .
docker images

# Run a Docker container using an image that is stored in Google Cloud Artifact Registry.
docker run --rm -p 8501:8501 us-east1-docker.pkg.dev/${PROJECT_ID}/app-pc-hospice-repo/app-pc-hospice:v1

# Set up Cloud Run service

# Configure Docker to Use gcloud as a Credential Helper
gcloud auth configure-docker

# Tag your image with the registryâ€™s URL
docker tag us-east1-docker.pkg.dev/app-pc-hospice/app-pc-hospice-repo/app-pc-hospice:v1 gcr.io/app-pc-hospice/us-east1-docker.pkg.dev/app-pc-hospice/app-pc-hospice-repo/app-pc-hospice:v1

# Push your Docker image to Google Container Registry:
docker push gcr.io/app-pc-hospice/us-east1-docker.pkg.dev/app-pc-hospice/app-pc-hospice-repo/app-pc-hospice:v1

# Deploy to Google Cloud Run

#Setup config for google run
gcloud components update - which will generate this...
sudo apt-get update && sudo apt-get --only-upgrade install google-cloud-cli-spanner-migration-tool google-cloud-cli-kubectl-oidc google-cloud-cli-kpt google-cloud-cli-datastore-emulator google-cloud-cli-app-engine-python-extras google-cloud-cli-app-engine-java google-cloud-cli-log-streaming google-cloud-cli-app-engine-grpc google-cloud-cli-pubsub-emulator google-cloud-cli-anthos-auth google-cloud-cli-firestore-emulator google-cloud-cli-config-connector google-cloud-cli-docker-credential-gcr google-cloud-cli-local-extract google-cloud-cli-app-engine-go google-cloud-cli-gke-gcloud-auth-plugin google-cloud-cli google-cloud-cli-bigtable-emulator google-cloud-cli-enterprise-certificate-proxy google-cloud-cli-package-go-module google-cloud-cli-app-engine-python kubectl google-cloud-cli-nomos google-cloud-cli-skaffold google-cloud-cli-harbourbridge google-cloud-cli-cloud-run-proxy google-cloud-cli-istioctl google-cloud-cli-cloud-build-local google-cloud-cli-minikube google-cloud-cli-cbt google-cloud-cli-spanner-emulator google-cloud-cli-terraform-tools

gcloud config set run/platform managed
gcloud config set run/region us-east1

#Deploy your image to Cloud Run by running:
gcloud run deploy app-pc-hospice-service --image gcr.io/app-pc-hospice/us-east1-docker.pkg.dev/app-pc-hospice/app-pc-hospice-repo/app-pc-hospice:v1 --allow-unauthenticated
* run will fail because default port for container is 8080 so manually go into cloud run and update service port to 8501

